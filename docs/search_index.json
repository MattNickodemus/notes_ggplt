[["index.html", "My notes of ggplot2 Chapter 1 Disclaimer", " My notes of ggplot2 Matt Nickodemus 2021-01-24 Chapter 1 Disclaimer These are my notes on ggplot. The thoughts, code, drawings, and notes are copied from several other sources, so nothing here should be attributed to me. This is just my notebook where I collect things I like as I learn. "],["the-basics-of-ggplot2.html", "Chapter 2 The basics of ggplot2 2.1 Data 2.2 aesthetics 2.3 geom 2.4 Scale 2.5 Guide 2.6 Labels 2.7 Theme", " Chapter 2 The basics of ggplot2 Every layer in a ggplot has five components data aesthetics geom stat position In addition to these five components we need to understand scales, guides, and themes. We will do this with a set of examples. Our first example is straight forward line plot showing the number of credits taken in each college from 2011 to 2020. As we walk though this, we will look at three components data aesthetics geom and scales guides themes 2.1 Data We will create a data set consisting of college credit counts for 2011-2020. library(tidyverse) library(purrr) make_credits &lt;- function(college) { slope &lt;- rnorm(1, 500, 500) intercept &lt;- rnorm(1, 20000, 2000) %&gt;% floor() x &lt;- 1:10 college &lt;- rep(college, 10) noise &lt;- rnorm(10, 1000, 1000) credits &lt;- intercept + slope*x + noise output_df &lt;- tibble(college = college, year = 2010 + x, credits = credits ) %&gt;% mutate(credits = as.integer(credits)) return(output_df) } colleges &lt;- c(&#39;Fine Art&#39;, &#39;Business&#39;, &#39;Physical Science&#39;, &#39;Social Science&#39;, &#39;Health Science&#39;, &#39;Humanities&#39;, &#39;Life Science&#39;, &#39;Earl&#39;) credits_by_college &lt;- map_dfr(colleges, make_credits) This data output is in tidy format. In tidy data Each variable forms a column. Each observation forms a row. Each type of observational unit forms a table. For our data set, the observations are the number of credits offered by a specific college in a given term. The variables are year and credits. Your data should always be tidy when using ggplot. library(gt) head(credits_by_college) %&gt;% gt() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #kkynsgosfl .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #kkynsgosfl .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kkynsgosfl .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #kkynsgosfl .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #kkynsgosfl .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kkynsgosfl .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #kkynsgosfl .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #kkynsgosfl .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #kkynsgosfl .gt_column_spanner_outer:first-child { padding-left: 0; } #kkynsgosfl .gt_column_spanner_outer:last-child { padding-right: 0; } #kkynsgosfl .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #kkynsgosfl .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #kkynsgosfl .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #kkynsgosfl .gt_from_md > :first-child { margin-top: 0; } #kkynsgosfl .gt_from_md > :last-child { margin-bottom: 0; } #kkynsgosfl .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #kkynsgosfl .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #kkynsgosfl .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kkynsgosfl .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #kkynsgosfl .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #kkynsgosfl .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #kkynsgosfl .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #kkynsgosfl .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #kkynsgosfl .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kkynsgosfl .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #kkynsgosfl .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #kkynsgosfl .gt_sourcenote { font-size: 90%; padding: 4px; } #kkynsgosfl .gt_left { text-align: left; } #kkynsgosfl .gt_center { text-align: center; } #kkynsgosfl .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #kkynsgosfl .gt_font_normal { font-weight: normal; } #kkynsgosfl .gt_font_bold { font-weight: bold; } #kkynsgosfl .gt_font_italic { font-style: italic; } #kkynsgosfl .gt_super { font-size: 65%; } #kkynsgosfl .gt_footnote_marks { font-style: italic; font-size: 65%; } college year credits Fine Art 2011 20441 Fine Art 2012 23211 Fine Art 2013 23772 Fine Art 2014 21554 Fine Art 2015 22254 Fine Art 2016 23959 In our plot the data layer is created with the following code. Note that there is nothing on plot. There are no axes, no graphs, no colors, no legend. Just a blank canvas. The reason for this is that in ggplot, the plot is created when we map the variables in the data to visual elements in the plot. This is done with the aes() function. ggplot(credits_by_college) 2.2 aesthetics When we add the aes() call within the ggplot call, we produce a set of axes on our plot. This is because we have mapped the variable year to the x axis in our graph, and the variable credits to the y-axis in our graph. We do not see a plot yet because we have not yet told ggplot what type of geometric object we want to use to in our plot. We do that next. ggplot(credits_by_college, aes(x = year, y = credits)) 2.3 geom 2.3.1 WTF In our next plot we have chosen the line geom for our graph. This does not give us the result that we are looking for. We are trying to draw a line chart showing credits for each year, for each college. The mistake we have made is that we have not assigned the college variable to as visual aspect of our graph. We do so in the next graph. ggplot(credits_by_college, aes(x = year, y = credits)) + geom_line() 2.3.2 More aesthetics? This graph gives us something closer to what we are looking for, but it is still not quite there. ggplot(credits_by_college, aes(x = year, y = credits, group = college)) + geom_line() The problem is that we would like the lines to be different colors, and we would like each color to be associated with a color. So we have to map the variable college to another aesthetic, color. ggplot(credits_by_college, aes(x = year, y = credits, group = college, color = college)) + geom_line() + geom_point(size = .5, alpha = .8) 2.4 Scale library(scales) ## ## Attaching package: &#39;scales&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## discard ## The following object is masked from &#39;package:readr&#39;: ## ## col_factor ggplot(credits_by_college, aes(x = year, y = credits, group = college, color = college)) + geom_line() + geom_point(size = .5, alpha = .8) + scale_x_continuous(breaks = pretty_breaks()) + scale_y_continuous(labels = comma) 2.5 Guide ggplot(credits_by_college, aes(x = year, y = credits, group = college, color = college)) + geom_line() + geom_point(size = .5, alpha = .8) + scale_x_continuous(breaks = pretty_breaks()) + scale_y_continuous(labels = comma) + guides(color = guide_legend(title = &quot;College&quot;)) 2.6 Labels ggplot(credits_by_college, aes(x = year, y = credits, group = college, color = college)) + geom_line() + geom_point(size = .5, alpha = .8) + scale_x_continuous(breaks = pretty_breaks()) + scale_y_continuous(labels = comma) + guides(color = guide_legend(title = &quot;College&quot;)) + labs(title = &quot;Credits by college&quot;, subtitle = &quot;Credits taken within each college 2011-2020&quot;, caption = &quot;Data supplied by OIE&quot;) + xlab(&quot;Year&quot;) + ylab(&#39;Credits&#39;) 2.7 Theme ggplot(credits_by_college, aes(x = year, y = credits, group = college, color = college)) + geom_line() + geom_point(size = .5, alpha = .8) + scale_x_continuous(breaks = pretty_breaks()) + scale_y_continuous(labels = comma) + guides(color = guide_legend(title = &quot;College&quot;)) + labs(title = &quot;Credits by college&quot;, subtitle = &quot;Credits taken within each college 2011-2020&quot;, caption = &quot;Data supplied by OIE&quot;, x = &#39;Year&#39;, y = &#39;Credits&#39;) + theme_minimal() + theme( panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.grid.minor.y = element_blank(), plot.subtitle = element_text(color = &quot;#a6a6a6&quot;, size = 10), plot.caption = element_text(color = &#39;#a6a6a6&#39;, size = 8, face = &#39;italic&#39;) ) "]]
